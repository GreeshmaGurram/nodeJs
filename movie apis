const express = require("express");
const sqlite3 = require("sqlite3");
const { open } = require("sqlite");
const path = require("path");

const app = express();
app.use(express.json());

const dbPath = path.join(__dirname, "moviesData.db");
let db = null;

const initializeDbAndServer = async () => {
  try {
    db = await open({
      filename: dbPath,
      driver: sqlite3.Database,
    });
  } catch (e) {
    console.log(`DB error: ${e.message}`);
    process.exit(1);
  }
};

initializeDbAndServer();

// Get Movie names API
const convertMovieNameToCamelCase = (obj) => {
  return {
    movieName: obj.movie_name,
  };
};
app.get("/movies/", async (request, response) => {
  const getMovieNamesQuery = `SELECT movie_name from movie`;
  const moviesArray = await db.all(getMovieNamesQuery);
  response.send(moviesArray.map((movie) => convertMovieNameToCamelCase(movie)));
});

// Post Movie API
app.post("/movies/", async (request, response) => {
  const movieDetails = request.body;
  const { directorId, movieName, leadActor } = movieDetails;
  const addMovieQuery = `INSERT INTO movie (director_id,movie_name,lead_actor) VALUES (${directorId}, '${movieName}', '${leadActor}');`;
  await db.run(addMovieQuery);
  response.send("Movie Successfully Added");
});

// Get Movie Details API
const convertMovieDetailsToCamelCase = (obj) => {
  return {
    movieId: obj.movie_id,
    directorId: obj.director_id,
    movieName: obj.movie_name,
    leadActor: obj.lead_actor,
  };
};
app.get("/movies/:movieId", async (request, response) => {
  const { movieId } = request.params;
  const getMovieQuery = `SELECT * FROM movie WHERE movie_id = ${movieId}`;
  const movie = await db.get(getMovieQuery);
  response.send(convertMovieDetailsToCamelCase(movie));
});

// Update Movie details API
app.put("/movies/:movieId/", async (request, response) => {
  const { movieId } = request.params;
  const movieDetails = request.body;
  const { directorId, movieName, leadActor } = movieDetails;
  const updateMovieQuery = `UPDATE movie SET director_id=${directorId}, movie_name='${movieName}',
    lead_actor='${leadActor}';`;
  await db.run(updateMovieQuery);
  response.send("Movie Details Updated");
});

// Delete Movie API
app.delete("/movies/:movieId/", async (request, response) => {
  const { movieId } = request.params;
  const deleteQuery = `DELETE FROM movie WHERE movie_id=${movieId}`;
  await db.run(deleteQuery);
  response.send("Movie Removed");
});

// Get Director Details API
const convertDirectorDetailsToCamelCase = (obj) => {
  return {
    directorId: obj.director_id,
    directorName: obj.director_name,
  };
};
app.get("/directors/", async (request, response) => {
  const getDirectorsQuery = `SELECT * FROM director;`;
  const directorsArray = await db.all(getDirectorsQuery);
  response.send(
    directorsArray.map((director) =>
      convertDirectorDetailsToCamelCase(director)
    )
  );
});

// Get Movie names by a director API
app.get("/directors/:directorId/movies/", async (request, response) => {
  const { directorId } = request.params;
  const getDirectorMovieQuery = `
    SELECT
     *
    FROM
     movie
    WHERE
      director_id = ${directorId};`;
  const moviesArray = await db.all(getDirectorMovieQuery);
  response.send(moviesArray.map((movie) => convertMovieNameToCamelCase(movie)));
});

module.exports = app;

