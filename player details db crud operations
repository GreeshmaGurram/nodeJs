const express = require("express");
const { open } = require("sqlite");
const sqlite3 = require("sqlite3");
const path = require("path");

const app = express();
app.use(express.json());

let db = null;
const dbPath = path.join(__dirname, "cricketMatchDetails.db");

const initializeDb = async () => {
  try {
    db = await open({
      filename: dbPath,
      driver: sqlite3.Database,
    });
  } catch (e) {
    console.log(`DB error: ${e.message}`);
    process.exit(1);
  }
};

initializeDb();

const convertPlayerTableColumnNamesToCamelCase = (obj) => {
  return {
    playerId: obj.player_id,
    playerName: obj.player_name,
  };
};

const convertMatchTableColumnNamesToCamelCase = (obj) => {
  return {
    matchId: obj.match_id,
    match: obj.match,
    year: obj.year,
  };
};

const convertPlayerStatsToCamelCase = (obj) => {
  return {
    playerId: obj.player_id,
    playerName: obj.player_name,
    totalScore: obj.score,
    totalFours: obj.fours,
    totalSixes: obj.sixes,
  };
};

// Get Players API
app.get("/players/", async (request, response) => {
  const getPlayersQuery = `SELECT * FROM player_details`;
  const playersArray = await db.all(getPlayersQuery);
  response.send(
    playersArray.map((player) =>
      convertPlayerTableColumnNamesToCamelCase(player)
    )
  );
});

// Get Player API
app.get("/players/:playerId", async (request, response) => {
  const { playerId } = request.params;
  const getPlayerQuery = `SELECT * from player_details 
    WHERE player_id=${playerId}`;
  const player = await db.get(getPlayerQuery);
  response.send(convertPlayerTableColumnNamesToCamelCase(player));
});

// Put Player API
app.put("/players/:playerId", async (request, response) => {
  const { playerId } = request.params;
  const { playerName } = request.body;
  const updatePlayerQuery = `UPDATE player_details SET player_name='${playerName}' 
      WHERE player_id = ${playerId};`;
  await db.run(updatePlayerQuery);
  response.send("Player Details Updated");
});

// Get Match Details API
app.get("/matches/:matchId", async (request, response) => {
  const { matchId } = request.params;
  const getMatchQuery = `SELECT * from match_details 
    WHERE match_id=${matchId}`;
  const match = await db.get(getMatchQuery);
  response.send(convertMatchTableColumnNamesToCamelCase(match));
});

// Get Player API
app.get("/players/:playerId/matches", async (request, response) => {
  const { playerId } = request.params;
  const getMatchesQuery = `SELECT * from match_details JOIN 
   player_match_score ON match_details.match_id = player_match_score.match_id
    WHERE player_id=${playerId}`;
  const matchesArray = await db.all(getMatchesQuery);
  response.send(
    matchesArray.map((match) => convertMatchTableColumnNamesToCamelCase(match))
  );
});

// Get Player API
app.get("/matches/:matchId/players", async (request, response) => {
  const { matchId } = request.params;
  const getPlayersQuery = `SELECT * from player_details JOIN 
   player_match_score ON player_details.player_id = player_match_score.player_id
    WHERE match_id=${matchId}`;
  const playersArray = await db.all(getPlayersQuery);
  response.send(
    playersArray.map((player) =>
      convertPlayerTableColumnNamesToCamelCase(player)
    )
  );
});

// Get Player API
app.get("/players/:playerId/playerScores", async (request, response) => {
  const { playerId } = request.params;
  const getPlayerStatsQuery = `
  SELECT player_details.player_id AS playerId,
  player_details.player_name AS playerName,
  SUM(player_match_score.score) AS totalScore,
  SUM(player_match_score.fours) AS totalFours,
  SUM(player_match_score.sixes) AS totalSixes
   from player_match_score NATURAL JOIN 
  player_details 
    WHERE player_id=${playerId}`;
  const playerStatsArray = await db.get(getPlayerStatsQuery);
  response.send(playerStatsArray);
});

module.exports = app;
